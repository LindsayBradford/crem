#!/bin/python

import subprocess
import sys
import sharedhook


checkPrefix = 'git pre-commit check:'


def main():
    print('Doing git pre-commit checks:') 
    doChecks()


def doChecks():
    failureCount = 0
    failureCount += checkStagedGoFileFormatting()
    failureCount += checkGoTestPasses()

    sharedhook.reportStatusAndExit(failureCount, checkPrefix)


def checkStagedGoFileFormatting():
    sys.stdout.write('  Checking Go File Formatting...') 
    sys.stdout.flush()

    result = sharedhook.ExitStatus.SUCCESS

    goStagedDiffResults = generateGoStagedDiffResults()
    finalResult = deriveUnformattedGoFiles(goStagedDiffResults)

    print(finalResult.name)
    return finalResult.value


def deriveUnformattedGoFiles(results):
    finalResult = sharedhook.ExitStatus.SUCCESS

    foundUnformattedGoFile = False
    for goFile in results:
        if goFile == '':
            continue
        if not goFileIsFormatted(goFile):
            print(f'    test(s) failed in {goFile}')
            sys.stdout.flush()
            foundUnformattedGoFile = True

    if foundUnformattedGoFile:
        finalResult = sharedbook.ExitStatus.FAILURE

    return finalResult


def goFileIsFormatted(goFile):
    commandArray = ['gofmt', '-l', goFile]
    output = subprocess.run(commandArray, capture_output=True, text=True)
    if output != '':
        return False
    return True


def generateGoStagedDiffResults():
    commandArray = ['go', 'diff', '--staged', '--name-only']
    output = subprocess.run(commandArray, capture_output=True, text=True)
    goDiffResults = output.stdout.split('\n')

    filteredResults = []
    for result in goDiffResults:
        if result.endswith('.go'):
            filteredResults.append(result)        
    
    return filteredResults


def checkGoTestPasses():
    sys.stdout.write('  Checking Go Test Results...')
    sys.stdout.flush()

    goTestResults = generateGoTestResults()
    finalResult = deriveFinalResult(goTestResults)
    
    print(finalResult.name)
    return finalResult.value


def generateGoTestResults():
    commandArray = ['go', 'test', './...']
    output = subprocess.run(commandArray, capture_output=True, text=True)
    return output.stdout.split('\n')


def deriveFinalResult(goTestResults):
    finalResult = sharedhook.ExitStatus.SUCCESS

    failureFound = False
    for result in goTestResults:
        resultArray = result.split()
        if len(resultArray) > 1 and resultArray[0] == "FAIL":
            if not failureFound:
                print('')
                failureFound = True
            failedTestFile = resultArray[1]
            print(f'    test(s) failed in {failedTestFile}')
            sys.stdout.flush()
    
    if failureFound:
        sys.stdout.write('  Checking Go Test Results...')
        finalResult = sharedhook.ExitStatus.FAILURE

    return finalResult


if __name__ == '__main__':
    main()
